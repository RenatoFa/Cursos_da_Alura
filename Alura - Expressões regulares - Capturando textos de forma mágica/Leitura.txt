Expressões Regulares

----Ancoras-----
\b - word boundary
^ - inicio do alvo
$ - fim do alvo



---Quantifiers---

{n} - exatamente
{n, } - no minimo n vezes
{n,m} - no minimo n, no maximo m vezes

? - zero ou uma vez
+ - uma ou mais vezes
* - zero ou mais vezes

---Classes de char---- []

[A - Z] - letras de A até zero
[123] - 1, 2 ou 3
\d - todos os dígitos [0-9]
\s - whitesspace [\t \r \n \f]
\w - wordchar [A-Za - z0 - 9]

[A-Z][a-zç]{3,8} - mes
[1-3]?\d - dia
\d{3} - 3 digitos
\s+ - um ou mais whitesspace


regex para tipos de data = [1-3]?\d\s+de\s+[A-Z][a-zç]{3,8}\s+de\s+\d{4}
regex para tipos de hora = \d{2}h\d{2}min\d{2}s
regex para tipos de placa de carro = [A-Z]{3}-\d{4}

? - zero ou uma vez
+ - uma ou mais vezes
* - zero ou mais vezes
{n} - exatamente n vezes.
{n,} - no minimo n vezes
{n,m} - no minimo n+1 vezes, no máximo m vezes

---- word boundary------
\bde\b

---Non word boundary----
\Bde\B
A nossa regex seleciona a sílaba por, e antes e depois dela,
deve ter um Non word boundary. Em outras palavras, a silaba
por deve aparecer dentro de uma palavra, nunca no inicio ou fim.

--Non-capturing group---

(?:de\s+)

---Grupos----

(\w+) - grupo de word chars
(\w+)?  - grupo opcional
(?:\w+) - non - capturing group

--Update dos quantifiers---

? (zero ou um caractere)
+ (um ou mais caracteres)
* (zero ou mais caracteres)
{n,m} (min n, max m caracteres)

Gananciosa: [a-z]{1,5}
Preguiçosa: [a-z]{1,5}?

--backreferes--

<(h1|h2).+?>([\s\wõçã]+)</\1>


Essa negação é algo muito comum nas regexes.

Há circunstâncias em que é mais fácil definir o que não queremos em vez de dizer o que queremos.
 A negação ^ ajuda nisso. Isso também é a razão da existência de classes como \W (com W maiúsculo) e \D (com D maiúsculo).

O \W é a non-word char, ou seja tudo que não é um word char. \W é um atalho para [^\w].

A classe \D, por sua vez, é um non-digit, ou seja, \D é um atalho para [^\d]

Repare também que não usamos a meta-char ^ como âncora pois aparece dentro de uma classe [^>].





